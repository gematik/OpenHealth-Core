public final class MacObject {
	public fun <init> ([B[BLde/gematik/openhealth/crypto/key/SecretKey;[B)V
	public synthetic fun <init> ([B[BLde/gematik/openhealth/crypto/key/SecretKey;[BILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getEncoded ()[B
	public final fun getMac ()[B
}

public final class de/gematik/openhealth/smartcard/ExchangeUtilsKt {
	public static final fun establishTrustedChannelBlocking (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Ljava/lang/String;)Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;
	public static final fun establishTrustedChannelBlocking (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Ljava/lang/String;Lkotlinx/coroutines/CoroutineDispatcher;)Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;
	public static synthetic fun establishTrustedChannelBlocking$default (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Ljava/lang/String;Lkotlinx/coroutines/CoroutineDispatcher;ILjava/lang/Object;)Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;
	public static final fun transmitBlocking (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public static final fun transmitBlocking (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineDispatcher;)Ljava/lang/Object;
	public static synthetic fun transmitBlocking$default (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineDispatcher;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/SmartCardUtilsKt {
	public static final fun transmitBlocking (Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope;Lde/gematik/openhealth/smartcard/command/CardCommandApdu;)Lde/gematik/openhealth/smartcard/command/CardResponseApdu;
	public static final fun transmitBlocking (Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope;Lde/gematik/openhealth/smartcard/command/CardCommandApdu;Lkotlinx/coroutines/CoroutineDispatcher;)Lde/gematik/openhealth/smartcard/command/CardResponseApdu;
	public static synthetic fun transmitBlocking$default (Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope;Lde/gematik/openhealth/smartcard/command/CardCommandApdu;Lkotlinx/coroutines/CoroutineDispatcher;ILjava/lang/Object;)Lde/gematik/openhealth/smartcard/command/CardResponseApdu;
}

public final class de/gematik/openhealth/smartcard/card/CardKey : de/gematik/openhealth/smartcard/card/ICardKeyReference {
	public fun <init> (I)V
	public fun calculateKeyReference (Z)I
}

public final class de/gematik/openhealth/smartcard/card/EncryptedPinFormat2 {
	public fun <init> (Ljava/lang/String;)V
	public final fun getBytes ()[B
}

public abstract interface class de/gematik/openhealth/smartcard/card/HealthCardScope : de/gematik/openhealth/smartcard/card/SmartCardCommunicationScope {
	public abstract synthetic fun transmit (Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract synthetic fun transmitSuccessfully (Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/card/HealthCardScope$DefaultImpls {
	public static synthetic fun transmit (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun transmitSuccessfully (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/card/HealthCardScopeKt {
	public static final fun healthCardScope (Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope;)Lde/gematik/openhealth/smartcard/card/HealthCardScope;
}

public final class de/gematik/openhealth/smartcard/card/HealthCardVersion2 {
	public fun <init> ([B[B[B[B[B[B[B[B)V
	public final fun getFillingInstructionsEfAtrVersion ()[B
	public final fun getFillingInstructionsEfEnvironmentSettingsVersion ()[B
	public final fun getFillingInstructionsEfGdoVersion ()[B
	public final fun getFillingInstructionsEfKeyInfoVersion ()[B
	public final fun getFillingInstructionsEfLoggingVersion ()[B
	public final fun getFillingInstructionsVersion ()[B
	public final fun getObjectSystemVersion ()[B
	public final fun getProductIdentificationObjectSystemVersion ()[B
}

public final class de/gematik/openhealth/smartcard/card/HealthCardVersion2Kt {
	public static final fun isHealthCardVersion21 (Lde/gematik/openhealth/smartcard/card/HealthCardVersion2;)Z
	public static final fun parseHealthCardVersion2 ([B)Lde/gematik/openhealth/smartcard/card/HealthCardVersion2;
}

public abstract interface class de/gematik/openhealth/smartcard/card/ICardKeyReference {
	public static final field Companion Lde/gematik/openhealth/smartcard/card/ICardKeyReference$Companion;
	public static final field DF_SPECIFIC_PWD_MARKER I
	public abstract fun calculateKeyReference (Z)I
}

public final class de/gematik/openhealth/smartcard/card/ICardKeyReference$Companion {
	public static final field DF_SPECIFIC_PWD_MARKER I
}

public final class de/gematik/openhealth/smartcard/card/Mode : java/lang/Enum {
	public static final field ENC Lde/gematik/openhealth/smartcard/card/Mode;
	public static final field MAC Lde/gematik/openhealth/smartcard/card/Mode;
	public static final field PASSWORD Lde/gematik/openhealth/smartcard/card/Mode;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lde/gematik/openhealth/smartcard/card/Mode;
	public static fun values ()[Lde/gematik/openhealth/smartcard/card/Mode;
}

public final class de/gematik/openhealth/smartcard/card/PaceKey {
	public fun <init> (Lde/gematik/openhealth/crypto/key/SecretKey;Lde/gematik/openhealth/crypto/key/SecretKey;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getEnc ()Lde/gematik/openhealth/crypto/key/SecretKey;
	public final fun getMac ()Lde/gematik/openhealth/crypto/key/SecretKey;
	public fun hashCode ()I
}

public final class de/gematik/openhealth/smartcard/card/PaceKeyKt {
	public static final fun getAES128Key ([BLde/gematik/openhealth/smartcard/card/Mode;)[B
}

public final class de/gematik/openhealth/smartcard/card/PasswordReference : de/gematik/openhealth/smartcard/card/ICardKeyReference {
	public fun <init> (I)V
	public fun calculateKeyReference (Z)I
	public final fun getPwdId ()I
}

public final class de/gematik/openhealth/smartcard/card/PsoAlgorithm : java/lang/Enum {
	public static final field SIGN_VERIFY_ECDSA Lde/gematik/openhealth/smartcard/card/PsoAlgorithm;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getIdentifier ()I
	public static fun valueOf (Ljava/lang/String;)Lde/gematik/openhealth/smartcard/card/PsoAlgorithm;
	public static fun values ()[Lde/gematik/openhealth/smartcard/card/PsoAlgorithm;
}

public abstract interface class de/gematik/openhealth/smartcard/card/SmartCardCommunicationScope {
	public static final field Companion Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope$Companion;
	public abstract fun getSupportsExtendedLength ()Z
	public abstract fun transmit (Lde/gematik/openhealth/smartcard/command/CardCommandApdu;Lkotlin/jvm/functions/Function1;)V
}

public final class de/gematik/openhealth/smartcard/card/SmartCardCommunicationScope$Companion {
}

public final class de/gematik/openhealth/smartcard/card/SmartCardCommunicationScopeKt {
	public static final fun transmit (Lde/gematik/openhealth/smartcard/card/SmartCardCommunicationScope;Lde/gematik/openhealth/smartcard/command/CardCommandApdu;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class de/gematik/openhealth/smartcard/card/TrustedChannelScope : de/gematik/openhealth/smartcard/card/HealthCardScope {
	public abstract fun getPaceKey ()Lde/gematik/openhealth/smartcard/card/PaceKey;
}

public final class de/gematik/openhealth/smartcard/card/TrustedChannelScope$DefaultImpls {
	public static synthetic fun transmit (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun transmitSuccessfully (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign {
	public static final field AID Ljava/lang/String;
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$Ef {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$Ef;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$Ef$CchAutE256 {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$Ef$CchAutE256;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$PrK {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$PrK;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$PrK$ChAutE256 {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$Esign$PrK$ChAutE256;
	public static final field KID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA {
	public static final field AID Ljava/lang/String;
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$Pd {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$Pd;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$StatusVD {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$StatusVD;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$Vd {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Df$HCA$Ef$Vd;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Ef {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Ef;
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Ef$CardAccess {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Ef$CardAccess;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$Ef$Version2 {
	public static final field FID I
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$Ef$Version2;
	public static final field SFID I
}

public final class de/gematik/openhealth/smartcard/cardobjects/Mf$MrPinHome {
	public static final field INSTANCE Lde/gematik/openhealth/smartcard/cardobjects/Mf$MrPinHome;
	public static final field PWID I
}

public final class de/gematik/openhealth/smartcard/command/ApduKt {
	public static final field EXPECTED_LENGTH_WILDCARD_EXTENDED I
	public static final field EXPECTED_LENGTH_WILDCARD_SHORT I
}

public final class de/gematik/openhealth/smartcard/command/CardCommandApdu {
	public static final field Companion Lde/gematik/openhealth/smartcard/command/CardCommandApdu$Companion;
	public fun <init> ([BILjava/lang/Integer;I)V
	public final fun getApdu ()[B
	public final fun getDataOffset ()I
	public final fun getRawNc ()I
	public final fun getRawNe ()Ljava/lang/Integer;
}

public final class de/gematik/openhealth/smartcard/command/CardCommandApdu$Companion {
	public final fun ofOptions (IIIILjava/lang/Integer;)Lde/gematik/openhealth/smartcard/command/CardCommandApdu;
	public final fun ofOptions (IIII[BLjava/lang/Integer;)Lde/gematik/openhealth/smartcard/command/CardCommandApdu;
}

public final class de/gematik/openhealth/smartcard/command/CardResponseApdu {
	public fun <init> ([B)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBytes ()[B
	public final fun getData ()[B
	public final fun getSw ()I
	public fun hashCode ()I
}

public final class de/gematik/openhealth/smartcard/command/ChangeReferenceDataCommandKt {
	public static final fun changeReferenceData (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/card/PasswordReference;ZLde/gematik/openhealth/smartcard/card/EncryptedPinFormat2;Lde/gematik/openhealth/smartcard/card/EncryptedPinFormat2;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/GeneralAuthenticateCommandKt {
	public static final fun generalAuthenticate (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Z)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun generalAuthenticate (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Z[BI)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/GetPinStatusCommandKt {
	public static final fun getPinStatus (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/card/PasswordReference;Z)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/GetRandomCommandKt {
	public static final fun getRandomValues (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;I)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/HealthCardCommand {
	public static final field Companion Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;
	public fun <init> (Ljava/util/Map;IIII[BLjava/lang/Integer;)V
	public synthetic fun <init> (Ljava/util/Map;IIII[BLjava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getCla ()I
	public final fun getData ()[B
	public final fun getExpectedStatus ()Ljava/util/Map;
	public final fun getIns ()I
	public final fun getNe ()Ljava/lang/Integer;
	public final fun getP1 ()I
	public final fun getP2 ()I
}

public final class de/gematik/openhealth/smartcard/command/HealthCardCommand$Companion {
}

public final class de/gematik/openhealth/smartcard/command/HealthCardCommandKt {
	public static final field EXPECT_ALL_WILDCARD I
	public static final field NE_MAX_EXTENDED_LENGTH I
	public static final field NE_MAX_SHORT_LENGTH I
	public static final fun commandApdu (Lde/gematik/openhealth/smartcard/command/HealthCardCommand;Z)Lde/gematik/openhealth/smartcard/command/CardCommandApdu;
	public static final fun requireSuccess (Lde/gematik/openhealth/smartcard/command/HealthCardResponse;)V
}

public final class de/gematik/openhealth/smartcard/command/HealthCardResponse {
	public fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;Lde/gematik/openhealth/smartcard/command/CardResponseApdu;)V
	public final fun getApdu ()Lde/gematik/openhealth/smartcard/command/CardResponseApdu;
	public final fun getStatus ()Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
}

public final class de/gematik/openhealth/smartcard/command/HealthCardResponseStatus : java/lang/Enum {
	public static final field AUTHENTICATION_FAILURE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field CHANNEL_CLOSED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field COMMAND_BLOCKED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field CORRUPT_DATA_WARNING Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field DATA_TOO_BIG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field DATA_TRUNCATED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field DF_NAME_EXISTS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field DUPLICATED_OBJECTS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field ENCIPHER_ERROR Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field END_OF_FILE_WARNING Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field END_OF_RECORD_WARNING Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field FILE_DEACTIVATED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field FILE_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field FILE_TERMINATED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field FULL_RECORD_LIST Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field INCONSISTENT_KEY_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field INCORRECT_SM_DO Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field INSTRUCTION_NOT_SUPPORTED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field KEY_ALREADY_PRESENT Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field KEY_EXPIRED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field KEY_INVALID Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field KEY_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field KEY_OR_PRK_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field MEMORY_FAILURE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field MESSAGE_TOO_LONG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NEW_FILE_SIZE_WRONG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_AUTHENTICATION Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_CURRENT_EF Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_KEY_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_MORE_CHANNELS_AVAILABLE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_PRK_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_PUK_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_RANDOM Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NO_RECORD_LIFE_CYCLE_STATUS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NUMBER_PRECONDITION_WRONG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field NUMBER_SCENARIO_WRONG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field OBJECT_TERMINATED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field OFFSET_TOO_BIG Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field OUT_OF_MEMORY Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PARAMETER_MISMATCH Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PASSWORD_BLOCKED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PASSWORD_DISABLED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PASSWORD_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PASSWORD_NOT_USABLE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PRK_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PUK_BLOCKED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field PUK_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RECORD_DEACTIVATED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RECORD_NOT_FOUND Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_00 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_01 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_02 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_03 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_04 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_05 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_06 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_07 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_08 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_09 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_10 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_11 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_12 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_13 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_14 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field RETRY_COUNTER_COUNT_15 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field SECURITY_STATUS_NOT_SATISFIED Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field SUCCESS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field TRANSPORT_STATUS_EMPTY_PIN Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field TRANSPORT_STATUS_TRANSPORT_PIN Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UNKNOWN_EXCEPTION Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UNKNOWN_STATUS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UNSUCCESSFUL_SEARCH Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UNSUPPORTED_FUNCTION Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_00 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_01 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_02 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_03 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_04 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_05 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_06 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_07 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_08 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_09 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_10 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_11 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_12 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_13 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_14 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field UPDATE_RETRY_WARNING_COUNT_15 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field VERIFICATION_ERROR Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field VOLATILE_KEY_WITHOUT_LCS Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_CIPHER_TEXT Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_FILE_TYPE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_KEY_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_PASSWORD_LENGTH Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_RANDOM_LENGTH Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_RANDOM_OR_NO_KEY_REFERENCE Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_RECORD_LENGTH Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_00 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_01 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_02 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_03 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_04 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_05 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_06 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_07 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_08 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_09 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_10 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_11 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_12 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_13 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_14 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_SECRET_WARNING_COUNT_15 Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static final field WRONG_TOKEN Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
	public static fun values ()[Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
}

public final class de/gematik/openhealth/smartcard/command/HealthCardResponseStatusKt {
	public static final fun getChangeReferenceDataStatus ()Ljava/util/Map;
	public static final fun getGeneralAuthenticateStatus ()Ljava/util/Map;
	public static final fun getGetRandomValuesStatus ()Ljava/util/Map;
	public static final fun getManageSecurityEnvironmentStatus ()Ljava/util/Map;
	public static final fun getPinStatus ()Ljava/util/Map;
	public static final fun getPsoComputeDigitalSignatureStatus ()Ljava/util/Map;
	public static final fun getReadStatus ()Ljava/util/Map;
	public static final fun getSelectStatus ()Ljava/util/Map;
	public static final fun getUnlockEgkStatus ()Ljava/util/Map;
	public static final fun getVerifySecretStatus ()Ljava/util/Map;
}

public final class de/gematik/openhealth/smartcard/command/ManageSecurityEnvironmentCommandKt {
	public static final fun manageSecEnvForSigning (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/card/PsoAlgorithm;Lde/gematik/openhealth/smartcard/card/CardKey;Z)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun manageSecEnvWithoutCurves (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/card/CardKey;Z[B)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/PsoComputeDigitalSignatureCommandKt {
	public static final fun psoComputeDigitalSignature (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;[B)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/ReadCommandKt {
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;I)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;II)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/ShortFileIdentifier;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/ShortFileIdentifier;I)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun read (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/ShortFileIdentifier;II)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/ResponseException : java/lang/Exception {
	public fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;)V
	public final fun getHealthCardResponseStatus ()Lde/gematik/openhealth/smartcard/command/HealthCardResponseStatus;
}

public final class de/gematik/openhealth/smartcard/command/SelectCommandKt {
	public static final fun select (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/ApplicationIdentifier;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun select (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/ApplicationIdentifier;ZZI)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun select (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/FileIdentifier;Z)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun select (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/identifier/FileIdentifier;ZZI)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
	public static final fun select (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;ZZ)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/UnlockEgkCommandKt {
	public static final fun unlockEgk (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Ljava/lang/String;Lde/gematik/openhealth/smartcard/card/PasswordReference;ZLde/gematik/openhealth/smartcard/card/EncryptedPinFormat2;Lde/gematik/openhealth/smartcard/card/EncryptedPinFormat2;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/command/UnlockMethod : java/lang/Enum {
	public static final field ChangeReferenceData Lde/gematik/openhealth/smartcard/command/UnlockMethod;
	public static final field None Lde/gematik/openhealth/smartcard/command/UnlockMethod;
	public static final field ResetRetryCounter Lde/gematik/openhealth/smartcard/command/UnlockMethod;
	public static final field ResetRetryCounterWithNewSecret Lde/gematik/openhealth/smartcard/command/UnlockMethod;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lde/gematik/openhealth/smartcard/command/UnlockMethod;
	public static fun values ()[Lde/gematik/openhealth/smartcard/command/UnlockMethod;
}

public final class de/gematik/openhealth/smartcard/command/VerifyPinCommandKt {
	public static final fun verifyPin (Lde/gematik/openhealth/smartcard/command/HealthCardCommand$Companion;Lde/gematik/openhealth/smartcard/card/PasswordReference;ZLde/gematik/openhealth/smartcard/card/EncryptedPinFormat2;)Lde/gematik/openhealth/smartcard/command/HealthCardCommand;
}

public final class de/gematik/openhealth/smartcard/exchange/CertificateExchangeKt {
	public static final fun retrieveCertificate (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult {
	public synthetic fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponse;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getResponse ()Lde/gematik/openhealth/smartcard/command/HealthCardResponse;
}

public final class de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult$CardBlocked : de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult {
	public fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponse;)V
}

public final class de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult$Success : de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult {
	public fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponse;)V
}

public final class de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult$WrongSecretWarning : de/gematik/openhealth/smartcard/exchange/HealthCardVerifyPinResult {
	public fun <init> (Lde/gematik/openhealth/smartcard/command/HealthCardResponse;I)V
	public final fun getRetriesLeft ()I
}

public final class de/gematik/openhealth/smartcard/exchange/PaceInfo {
	public fun <init> (Ljava/lang/String;Lde/gematik/openhealth/crypto/key/EcCurve;)V
	public final fun getCurve ()Lde/gematik/openhealth/crypto/key/EcCurve;
	public final fun getProtocolId ()Ljava/lang/String;
	public final fun getProtocolIdBytes ()[B
}

public final class de/gematik/openhealth/smartcard/exchange/PaceInfoKt {
	public static final fun parsePaceInfo ([B)Lde/gematik/openhealth/smartcard/exchange/PaceInfo;
}

public final class de/gematik/openhealth/smartcard/exchange/PinExchangeKt {
	public static final fun unlockEgk (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun verifyPin (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/exchange/RandomExchangeKt {
	public static final fun getRandom (Lde/gematik/openhealth/smartcard/card/HealthCardScope;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/exchange/ReadVsdExchangeKt {
	public static final fun readVsd (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/exchange/SignChallengeExchangeKt {
	public static final fun signChallenge (Lde/gematik/openhealth/smartcard/card/TrustedChannelScope;[BLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/exchange/TrustedChannelPaceKeyExchangeKt {
	public static final fun establishTrustedChannel (Lde/gematik/openhealth/smartcard/card/HealthCardScope;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class de/gematik/openhealth/smartcard/identifier/ApplicationIdentifier {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> ([B)V
	public final fun getAid ()[B
}

public final class de/gematik/openhealth/smartcard/identifier/FileIdentifier {
	public fun <init> (I)V
	public fun <init> ([B)V
	public final fun getFid ()[B
}

public final class de/gematik/openhealth/smartcard/identifier/ShortFileIdentifier {
	public fun <init> (I)V
	public fun <init> (Ljava/lang/String;)V
	public final fun getSfId ()I
}

public final class de/gematik/openhealth/smartcard/tagobjects/DataObject {
	public static final field Companion Lde/gematik/openhealth/smartcard/tagobjects/DataObject$Companion;
	public fun <init> ([BLde/gematik/openhealth/asn1/Asn1Tag;)V
	public final fun getData ()[B
	public final fun getEncoded ()[B
	public final fun getTag ()Lde/gematik/openhealth/asn1/Asn1Tag;
	public final fun isEncrypted ()Z
}

public final class de/gematik/openhealth/smartcard/tagobjects/DataObject$Companion {
	public final fun encrypted ([B)Lde/gematik/openhealth/smartcard/tagobjects/DataObject;
}

public final class de/gematik/openhealth/smartcard/tagobjects/LengthObject {
	public fun <init> (I)V
	public final fun getEncoded ()[B
}

public final class de/gematik/openhealth/smartcard/tagobjects/StatusObject {
	public fun <init> ([B)V
	public final fun getEncoded ()[B
}

public final class de/gematik/openhealth/smartcard/utils/BytesKt {
	public static final fun padData ([BIB)[B
	public static synthetic fun padData$default ([BIBILjava/lang/Object;)[B
	public static final fun unpadData ([BB)[B
	public static synthetic fun unpadData$default ([BBILjava/lang/Object;)[B
}

